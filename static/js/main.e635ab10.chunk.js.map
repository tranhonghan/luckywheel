{"version":3,"sources":["components/WheelComponent.js","screens/home.js","screens/admin.js","App.js","index.js"],"names":["WheelComponent","segments","segColors","winningSegment","onFinished","primaryColor","contrastColor","buttonText","isOnlyOnce","currentSegment","isStarted","useState","isFinished","setFinished","timerHandle","timerDelay","length","angleCurrent","angleDelta","size","canvasContext","maxSpeed","Math","PI","upTime","downTime","spinStart","frames","centerX","centerY","useEffect","wheelInit","setTimeout","window","scrollTo","initCanvas","wheelDraw","canvas","document","getElementById","navigator","appVersion","indexOf","createElement","setAttribute","appendChild","addEventListener","spin","getContext","Date","getTime","setInterval","onTimerTick","draw","duration","progress","finished","sin","clearInterval","clear","drawWheel","drawNeedle","drawSegment","key","lastAngle","angle","ctx","value","save","beginPath","moveTo","arc","lineTo","closePath","fillStyle","fill","stroke","translate","rotate","font","fillText","substr","restore","len","PI2","lineWidth","strokeStyle","textBaseline","textAlign","i","fileStyle","change","floor","clearRect","id","width","height","style","pointerEvents","Home","Fragment","className","winner","console","log","Admin","App","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e635ab10.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst WheelComponent = ({\n  segments,\n  segColors,\n  winningSegment,\n  onFinished,\n  primaryColor,\n  contrastColor,\n  buttonText,\n  isOnlyOnce\n}) => {\n  let currentSegment = ''\n  let isStarted = false\n  const [isFinished, setFinished] = useState(false)\n  let timerHandle = 0\n  const timerDelay = segments.length\n  let angleCurrent = 0\n  let angleDelta = 0\n  const size = 250\n  let canvasContext = null\n  let maxSpeed = Math.PI / `${segments.length}`\n  const upTime = segments.length * 100\n  const downTime = segments.length * 1000\n  let spinStart = 0\n  let frames = 0\n  const centerX = 300\n  const centerY = 300\n  useEffect(() => {\n    wheelInit()\n    setTimeout(() => {\n      window.scrollTo(0, 1)\n    }, 0)\n  }, [])\n  const wheelInit = () => {\n    initCanvas()\n    wheelDraw()\n  }\n\n  const initCanvas = () => {\n    let canvas = document.getElementById('canvas')\n    if (navigator.appVersion.indexOf('MSIE') !== -1) {\n      canvas = document.createElement('canvas')\n      canvas.setAttribute('width', 600)\n      canvas.setAttribute('height', 600)\n      canvas.setAttribute('id', 'canvas')\n      document.getElementById('wheel').appendChild(canvas)\n    }\n    canvas.addEventListener('click', spin, false)\n    canvasContext = canvas.getContext('2d')\n  }\n  const spin = () => {\n    isStarted = true\n    if (timerHandle === 0) {\n      spinStart = new Date().getTime()\n      // maxSpeed = Math.PI / ((segments.length*2) + Math.random())\n      maxSpeed = Math.PI / segments.length\n      frames = 0\n      timerHandle = setInterval(onTimerTick, timerDelay)\n    }\n  }\n  const onTimerTick = () => {\n    frames++\n    draw()\n    const duration = new Date().getTime() - spinStart\n    let progress = 0\n    let finished = false\n    if (duration < upTime) {\n      progress = duration / upTime\n      angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2)\n    } else {\n      if (winningSegment) {\n        if (currentSegment === winningSegment && frames > segments.length) {\n          progress = duration / upTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n          progress = 1\n        } else {\n          progress = duration / downTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n        }\n      } else {\n        progress = duration / downTime\n        angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n      }\n      if (progress >= 1) finished = true\n    }\n\n    angleCurrent += angleDelta\n    while (angleCurrent >= Math.PI * 2) angleCurrent -= Math.PI * 2\n    if (finished) {\n      setFinished(true)\n      onFinished(currentSegment)\n      clearInterval(timerHandle)\n      timerHandle = 0\n      angleDelta = 0\n    }\n  }\n\n  const wheelDraw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const draw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const drawSegment = (key, lastAngle, angle) => {\n    const ctx = canvasContext\n    const value = segments[key]\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(centerX, centerY)\n    ctx.arc(centerX, centerY, size, lastAngle, angle, false)\n    ctx.lineTo(centerX, centerY)\n    ctx.closePath()\n    ctx.fillStyle = segColors[key]\n    ctx.fill()\n    ctx.stroke()\n    ctx.save()\n    ctx.translate(centerX, centerY)\n    ctx.rotate((lastAngle + angle) / 2)\n    ctx.fillStyle = contrastColor || 'white'\n    ctx.font = 'bold 1em proxima-nova'\n    ctx.fillText(value.substr(0, 21), size / 2 + 20, 0)\n    ctx.restore()\n  }\n\n  const drawWheel = () => {\n    const ctx = canvasContext\n    let lastAngle = angleCurrent\n    const len = segments.length\n    const PI2 = Math.PI * 2\n    ctx.lineWidth = 1\n    ctx.strokeStyle = primaryColor || 'black'\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = 'center'\n    ctx.font = '1em proxima-nova'\n    for (let i = 1; i <= len; i++) {\n      const angle = PI2 * (i / len) + angleCurrent\n      drawSegment(i - 1, lastAngle, angle)\n      lastAngle = angle\n    }\n\n    // Draw a center circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, 50, 0, PI2, false)\n    ctx.closePath()\n    ctx.fillStyle = primaryColor || 'black'\n    ctx.lineWidth = 10\n    ctx.strokeStyle = contrastColor || 'white'\n    ctx.fill()\n    ctx.font = 'bold 1em proxima-nova'\n    ctx.fillStyle = contrastColor || 'white'\n    ctx.textAlign = 'center'\n    ctx.fillText(buttonText || 'Spin', centerX, centerY + 3)\n    ctx.stroke()\n\n    // Draw outer circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, size, 0, PI2, false)\n    ctx.closePath()\n\n    ctx.lineWidth = 10\n    ctx.strokeStyle = primaryColor || 'black'\n    ctx.stroke()\n  }\n\n  const drawNeedle = () => {\n    const ctx = canvasContext\n    ctx.lineWidth = 1\n    ctx.strokeStyle = contrastColor || 'white'\n    ctx.fileStyle = contrastColor || 'white'\n    ctx.beginPath()\n    ctx.moveTo(centerX + 20, centerY - 50)\n    ctx.lineTo(centerX - 20, centerY - 50)\n    ctx.lineTo(centerX, centerY - 70)\n    ctx.closePath()\n    ctx.fill()\n    const change = angleCurrent + Math.PI / 2\n    let i =\n      segments.length -\n      Math.floor((change / (Math.PI * 2)) * segments.length) -\n      1\n    if (i < 0) i = i + segments.length\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = primaryColor || 'black'\n    ctx.font = 'bold 1.5em proxima-nova'\n    currentSegment = segments[i]\n    isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50)\n  }\n  const clear = () => {\n    const ctx = canvasContext\n    ctx.clearRect(0, 0, 600, 600)\n  }\n  return (\n    <div id='wheel'>\n      <canvas\n        id='canvas'\n        width='600'\n        height='600'\n        style={{\n          pointerEvents: isFinished && !isOnlyOnce ? 'none' : 'auto'\n        }}\n      />\n    </div>\n  )\n}\nexport {WheelComponent}","import React from 'react'\nimport {WheelComponent} from '../components/WheelComponent'\nimport '../styles/home.css'\n\nconst Home = () => {\n    const segments = [\n        'Tao', 'Buoi', 'Chanh', 'Dua', 'Cam', 'Tac', 'Du Du', 'Sau Rieng'\n    ]\n    const segColors = [\n        '#EE4040',\n        '#F0CF50',\n        '#815CD1',\n        '#3DA5E0',\n        '#34A24F',\n        '#F9AA1F',\n        '#EC3F3F',\n        '#FF9000'\n    ]\n    const onFinished = (winner) => {\n        console.log(winner)\n    }\n\n    return (\n        <React.Fragment>\n            <div className='wrapper'>\n                <div className='divide-part2'>\n\n                </div>\n                <div className='divide-part'>\n                    <WheelComponent\n                        segments={segments}\n                        segColors={segColors}\n                        // winningSegment={segments[3]}\n                        onFinished={(winner) => onFinished(winner)}\n                        primaryColor='black'\n                        contrastColor='white'\n                        buttonText='Spin'\n                        isOnlyOnce = {true}\n                    />\n                </div>\n                <div className='divide-part2'>\n\n                </div>\n            </div>\n        </React.Fragment>\n  )\n}\n\nexport {Home}","import React from 'react'\n\nconst Admin = () => {\n    return (\n        <div>\n\n        </div>\n    )\n}\n\nexport {Admin}","import React from 'react'\nimport {\n  BrowserRouter as Router, Switch, Route, Link\n} from 'react-router-dom'\nimport {Home} from './screens/home'\nimport {Admin} from './screens/admin'\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path='/home'>\n            <Home/>\n          </Route>\n          <Route path='/admin'>\n            <Admin/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}